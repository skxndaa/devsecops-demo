# Name of your workflow
name: DevSecOps CI/CD Pipeline

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Job 1: Lints the code and runs tests
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      # Step 1.1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 1.2: Sets up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 1.3: Installs project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 1.4: Runs the linter (flake8) to check for code style issues
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      # Step 1.5: Runs the tests (pytest)
      - name: Test with pytest
        run: |
          pytest

  # Job 2: Runs CodeQL Static Analysis (SAST)
  codeql-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test # This job only runs if lint-and-test succeeds
    permissions:
      security-events: write # Required to upload CodeQL results
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2.1: Initializes the CodeQL scanner
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      # Step 2.2: Runs the analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Job 3 (BONUS): Scans for exposed secrets
  secret-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test # This job also depends on the first one
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required by TruffleHog for a full history scan

      # Step 3.1: Runs TruffleHog to find secrets
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --only-verified

  # Job 4: Builds the Docker image and scans it for vulnerabilities
  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: lint-and-test # This job also depends on the first one
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 4.1: Loads the created Docker image so Trivy can scan it
      - name: Build image and load into Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true # This loads the image to the runner's docker daemon
          tags: devsecops-demo:latest

      # Step 4.2: Runs Trivy vulnerability scanner on the image
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devsecops-demo:latest'
          format: 'table'
          exit-code: '1' # Fail the build if HIGH or CRITICAL vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'